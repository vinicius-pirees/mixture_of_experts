# -*- coding: utf-8 -*-

import numpy as np
import pandas
import os
import argparse
from utils import softmax, series_to_supervised

parser = argparse.ArgumentParser(description='Mistura de Especialistas')

parser.add_argument('--f', '-filename',
                    dest='filename',
                    type=str,
                    default='treinamento-1.txt',
                    help='Nome do Arquivo')

args = parser.parse_args()
filename = args.filename

file = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(filename))) + '/' + filename
series = pandas.read_csv(file,  header=None)

D = series_to_supervised(series, 5).values

X = D[:,0:-1]
Y = D[:,-1].reshape(X.shape[0],1)


m = 6

me = {'gating': np.array([[ 1.18818129,  1.4610389 ,  0.77672216, -0.08557648, -2.02750129,
         0.57737931],
       [ 0.81787765, -1.16818456, -0.72990989,  0.60310946,  0.13692754,
         1.91420816],
       [-1.29241648,  0.33361373, -2.56454591, -0.92107717, -2.24361729,
        -0.73109844],
       [-0.74474862, -1.59112653, -1.37772961, -0.16072113,  0.55504003,
         2.10575026],
       [ 3.62413325,  6.1726159 ,  5.08484344,  4.13992977,  4.02871351,
        -1.38404327],
       [-1.39122073, -0.80576721,  1.37333217, -0.54614516,  2.77622198,
        -0.41231566]]), 'expert_var': [0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 'expert_W1': {0: np.array([[ 1.77270513,  0.5489807 ,  0.95478614,  1.80910944,  0.37087242,
        -0.56926633],
       [ 0.38491374, -1.97406597,  1.33993254,  0.10251538,  1.38111892,
        -0.47979282],
       [ 1.12273994,  2.27220275,  1.50556786, -0.35415226,  1.10277566,
        -0.36952562],
       [ 1.37818677,  1.20446567,  2.30486406,  0.9495613 ,  0.87679871,
        -0.36405006],
       [ 1.04196974,  1.25322028,  0.28095662,  1.51649317,  2.11276145,
         0.57863926],
       [ 0.05047912,  2.84414466,  0.64496137,  2.42304259,  1.14419211,
         0.5416656 ],
       [-5.95110682,  3.39877922,  4.46589933, -2.02409482,  1.7631898 ,
        -1.05901965],
       [ 4.5302588 , -0.66187258, -0.53408965,  5.62866254,  1.68345585,
         1.82071718],
       [ 0.58559946, -0.20153552, -0.70948056, -0.76520922,  2.51425885,
         3.62329666]]), 1: np.array([[ 2.62030404e-01, -1.95113118e-01,  7.36174449e-02,
         1.87347766e+00,  2.50961620e+00,  9.96079854e-01],
       [-5.62380747e-02, -3.92846141e-01,  5.44357502e-01,
         8.50060655e-01,  5.18571591e+00,  1.33061902e+00],
       [ 1.49014839e+00,  3.69933609e+00,  1.59748775e+00,
        -4.93075001e+00,  2.11440142e+00, -1.05059981e+00],
       [ 1.78766587e+00,  4.80822493e+00,  3.75757984e+00,
         4.26961980e+00, -1.52195441e+00, -3.28671983e+00],
       [ 2.23691928e+00, -2.22704441e-01, -4.97433476e-02,
         2.73358835e+00,  2.58880383e+00,  8.61374642e-01],
       [ 6.49643671e-02,  9.71587962e-02,  5.49892278e+00,
         7.76249667e+00, -4.29535990e+00,  1.15554519e+01],
       [-1.21425197e-01, -2.59293425e-01, -2.59879538e-01,
        -8.22196920e-02,  4.86648861e+00,  4.39385792e+00],
       [ 2.28569127e+00,  3.18021878e+00,  3.89226106e+00,
        -7.23045430e-02,  6.38226533e-01,  1.16084111e+00],
       [ 1.05915073e-02, -2.98914462e-01,  4.46448512e-01,
         1.98131271e+00, -1.04574350e+00, -4.73134664e-02]]), 2: np.array([[-0.44523316,  0.44628646, -0.23981299,  0.36649122,  1.32106114,
         1.58717435],
       [-0.18256913,  1.73483381,  2.58758008,  1.8365856 ,  0.18043317,
        -0.46394997],
       [ 0.69684166,  0.28731081, -0.12109053,  0.04745944,  1.76880749,
         1.23353784],
       [ 1.05849461, -2.62071388,  2.25883597,  1.55277158, -0.69817971,
        -0.62429293],
       [ 0.1770816 , -0.55650802,  3.79599084, -0.68936762,  0.16799978,
         3.72910204],
       [ 0.85102081,  3.42700176,  3.56380363, -0.99853352,  2.89720999,
         3.09385793],
       [ 0.19164916, -0.64319488,  0.43047905,  0.97606   ,  1.24086311,
         0.36026718]]), 3: np.array([[ 0.00842919,  1.30975031,  2.1475827 , -1.01822476, -3.06195026,
        -0.39611092],
       [-0.01335904, -0.25605013,  0.13084062, -0.30283688,  2.27360369,
         0.95592866],
       [ 0.56894533,  3.27670127, -0.65141935, -0.07245592,  1.37645697,
        -0.1712269 ],
       [-0.01165218,  0.36575498, -0.1521008 , -0.31955483,  4.15644238,
         4.27746953],
       [ 0.00625836,  0.68792395,  0.19144292, -0.21433562, -0.92177629,
         1.06575536],
       [-0.06344035,  0.24257052,  0.18819747, -3.50131406,  0.04310476,
         1.40357364],
       [-0.00953595,  0.26753114,  2.18351673,  1.20557029,  1.85667479,
         0.78237364]]), 4: np.array([[ 1.94914241e-02,  2.44552243e-02, -4.87162323e-02,
        -1.92126054e-02, -2.32816635e+00, -1.88420444e+00],
       [ 5.90776299e-04,  1.09639948e-02,  1.26567743e-02,
         3.82450731e-02, -2.36451043e+00,  1.89576066e+00],
       [-7.85288776e-01, -4.39313170e-02,  3.22490784e+00,
        -7.09760703e-01,  1.07884037e+00,  3.43711568e+00]]), 5: np.array([[ 0.91205329, -0.27953237,  1.35871838,  0.4130005 ,  3.05990604,
         1.39581233],
       [-0.43926732,  0.10797312,  0.42696628,  1.3002136 , -0.72029118,
        -0.11553326],
       [ 0.35665675, -0.92474659,  6.02840782,  0.05016234,  0.55402025,
         2.06643395],
       [-0.37627641,  0.16368861, -0.2587685 ,  1.88922967,  0.53590129,
        -0.27645335]])}, 'expert_W2': {0: np.array([[ 1.50623279,  1.42755466,  1.36830571, -1.68597134, -2.01108099,
         1.54236204,  0.61593197,  0.75664355,  2.00030697, -0.72821008]]), 1: np.array([[-1.47059165,  0.56810064,  0.52133147,  0.35517653,  0.40568575,
        -3.87104462,  1.18232923, -0.35085308,  1.24019802,  3.67285059]]), 2: np.array([[ 2.32758047,  0.51572427,  1.04838587,  0.98385362,  0.58122002,
        -0.73175878, -1.80339629, -1.67121366]]), 3: np.array([[ 0.64462377,  1.40242524, -0.35701928,  1.41406989,  0.96651746,
        -0.88118217, -0.85376186, -1.62008838]]), 4: np.array([[-1.45047803,  1.39076588, -0.26228595, -1.45913417]]), 5: np.array([[ 1.4437733 ,  3.00066671, -1.07602392, -1.97336502, -0.1627021 ]])}, 'last_likelihood': -220.2882546707202, 'last_error': 0.04250458475547178}


## Teste
N = X.shape[0]
ne = X.shape[1]
ns = Y.shape[1]

##add bias
X = np.concatenate((X, np.ones((N, 1))), axis=1)
ne = ne + 1

Wg = me['gating']
W1 = me['expert_W1']
W2 = me['expert_W2']
var = me['expert_var']

##calcula saida
Yg = softmax(np.dot(X, Wg.T))
Ye = {}
for i in range(m):
    Z1 = np.dot(X, W1[i].T)
    A1 = (np.exp(Z1) - np.exp(-Z1)) / (np.exp(Z1) + np.exp(-Z1))
    ##add bias
    A1 = np.concatenate((A1, np.ones((N, 1))), axis=1)
    Ye[i] = np.dot(A1, W2[i].T)
Ym = np.zeros((N, ns))
for i in range(m):
    Yge = Yg[:, i].reshape(N, 1)
    Ym = Ym + Ye[i] * Yge

##calculo da funcao de verossimilhanca
Py = np.zeros((N, m))
for i in range(m):
    Yaux = Ye[i]
    for j in range(N):
        diff = Y[j, :] - Yaux[j, :]
        Py[j, i] = np.exp(np.dot(-diff, diff.T) / (2 * var[i]))

likelihood = np.sum(np.log(np.sum(Yg * Py, axis=1, keepdims=True)))



errov = Ym - Y
EQMv = 1 / N * np.sum(errov * errov)

with open('output.txt', 'w') as f:
    print("Erro quadrático Médio:",EQMv, file=f)
    print("Likelihood:",likelihood, file=f)
    for i in range(Y.shape[0]):
        print("Original", Y[i], '\t', "Predição", Ym[i], file=f)

print("Saída gravada no arquivo output.txt")
